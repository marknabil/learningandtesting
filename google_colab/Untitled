{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Untitled","version":"0.3.2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python2","display_name":"Python 2"},"accelerator":"GPU"},"cells":[{"metadata":{"id":"3CdknN8liuA5","colab_type":"code","outputId":"417bbfb1-3ff1-4893-c7be-e89879512b71","executionInfo":{"status":"error","timestamp":1553278536756,"user_tz":-60,"elapsed":998,"user":{"displayName":"mark nabil","photoUrl":"","userId":"04731080965943929871"}},"colab":{"base_uri":"https://localhost:8080/","height":134}},"cell_type":"code","source":["'''\n","\tKen Caluwaerts 2014\n","\t<ken@caluwaerts.eu>\n","\t\n","\tTensegrity spring-mass model with Cartesian coordinates instead of Skelton's\n","\tgeneralized coordinates.\n","\t\n","'''\n","import numpy as np\n","from scipy.integrate import ode as sode\n","\n","class Simulator(object):\n","\tdef __init__(self,nodes,bar_connections,node_mass,spring_connections,spring_k,spring_d,spring_l0,nodal_damping=0,bar_stiffness=100000., external_nodal_forces=None):\n","    \n","\t\t'''\n","\t\t\tAutomatically computed constants:\n","\t\t\tN: number of nodes\n","\t\t\tB: number of bars\n","\t\t\tS: number of springs\n","\t\t\tC: number of constrained nodes\n","\t\t\t\n","\t\t\tParameters:\n","\t\t\tnodes: initial nodal coordinate matrix: Nx3\n","\t\t\tbar_connections: bar connection matrix: BxN\n","\t\t\tnode_mass: masses of the nodes: N \n","\t\t\tspring_connections: spring connection matrix: SxN\n","\t\t\tspring_k: vector of spring constants: S\n","\t\t\tspring_d: vector of spring damping coefficients: S\n","\t\t\tspring_l0: vector of spring equilibrium lengths: S\n","\t\t\tnodal_damping: nodal damping coefficient (global)\n","\t\t\tbar_stiffness: spring constants of the bars\t\n","\t\t\texternal_nodal_forces: a function of time returning the external forces applied to the nodes (or None to disable external forces). Can be used to model e.g. gravity.\n","\n","\t\t\tReturns:\n","\t\t\treal_node_velocities: the nodal velocities are projected on the bars and this component is removed as well as the velocities of fixed points\t\t\n","\t\t'''\n","\t\tself.nodes = nodes\n","\t\tself.nodes_eucl = self.nodes.copy() #a copy, because the user might change self.nodes to change the position of the fixed nodes (ALL nodes)\n","\t\tself.bar_connections = bar_connections\n","\t\tself.node_mass = node_mass.ravel()\n","\t\tself.spring_connections = spring_connections\n","\t\tself.spring_k = spring_k\n","\t\tself.spring_d = spring_d\n","\t\tself.spring_l0 = spring_l0\n","\t\tself.spring_l0_offset = self.spring_l0.copy()#np.zeros(spring_l0.shape) #the offset (motor) of spring_l0 (a constant parameter), so the actual eq. length is spring_l0+spring_l0_offset. This vector is computed internally, by interpolating spring_l0_offset_target == the offset target length at the next time step\n","\t\tself.nodal_damping = nodal_damping\n","\t\tself.bar_stiffness = bar_stiffness\n","\t\tself.external_nodal_forces = external_nodal_forces \n","\n","\t\t#Check if the bars and spring connection matrices are valid\n","\t\t#if(np.where(np.abs(self.bar_connections).sum(axis=0)>1)[0].shape[0]>0):\n","\t\t\t#raise Exception(\"Invalid bar connection matrix: two bars have the same endpoint\")\n","\t\tif(not np.abs(self.bar_connections.sum(axis=1)).sum() == 0):\n","\t\t\traise Exception(\"Invalid bar connection matrix: each bar needs two endpoints\")\n","\t\tif(not np.abs(self.spring_connections.sum(axis=1)).sum() == 0):\n","\t\t\traise Exception(\"Invalid spring connection matrix: each spring needs two endpoints\")\n","\t\t\n","\t\t#constants\n","\t\tself.N = self.nodes.shape[0]\n","\t\tself.B = self.bar_connections.shape[0]\n","\t\tself.S = self.spring_connections.shape[0]\n","\t\n","\t\tself.compute_bar_lengths()\n","\t\tself.bar_l0 = self.L_bar.copy()\n","\n","\t\t#compute the real initial velocities (projections onto the bars)\n","\t\t#self.compute_initial_velocities()\n","\n","\t\t#allow hooks\n","\t\tself.init_event_listeners()\n","\n","\tdef compute_bar_lengths(self):\n","\t\t'''\n","\t\t\tComputes the bar lengths, which is needed to compute Phi\n","\t\t\tsets self.L_bar: B\n","\t\t'''\n","\t\tself.L_bar = np.sqrt(np.sum(np.dot(self.bar_connections,self.nodes_eucl)**2,1))\n","\n","\tdef compute_spring_lengths(self):\n","\t\t'''\n","\t\t\tComputes the spring lengths\n","\t\t\tsets self.L_spring: S\n","\t\t'''\n","\t\tself.L_spring = np.sqrt(np.sum(np.dot(self.spring_connections,self.nodes_eucl)**2,1))\n","\n","\tdef compute_spring_velocities(self):\n","\t\t'''\n","\t\t\tComputes the velocity of two endpoints projected onto normalized vector connecting them (if there's a spring between them)\n","\t\t\tsets self.L_spring_dot: S\n","\t\t'''\n","\t\tself.L_spring_dot = np.sqrt(np.sum(np.dot(self.spring_connections,self.nodes_dot)**2,1))\n","\n","\tdef compute_nodal_forces(self,t,mix):\n","\t\t'''\n","\t\t\tComputes the forces (Euclidean) on the nodes (using self.nodes_eucl, self.nodes_dot) and stores them in self.nodal_forces\n","\t\t'''\n","\t\t#compute spring_forces\n","\t\tself.compute_spring_lengths()\n","\t\tself.compute_bar_lengths()\n","\t\tself.compute_spring_velocities()\n","\t\tself.spring_forces = self.spring_k*(self.L_spring-(self.spring_state*(1.-mix)+mix*self.spring_l0_offset)) #force acting along the strings (in Newton): k(l-l0)\n","\t\t\n","\t\t#handle slack springs if required\n","\t\tself.spring_forces = np.where(self.spring_forces>0,self.spring_forces,0)\n","\n","\t\t#compute force density\n","\t\tself.spring_force_densities = self.spring_forces/self.L_spring\n","\t\t\t\t\n","\t\t#compute nodal forces \n","\t\tself.K = -np.dot(self.spring_connections.T*self.spring_force_densities,self.spring_connections) #C^T k' C\n","\t\t#self.K += -np.dot(self.bar_connections.T*self.bar_force_densities,self.bar_connections)\n","\t\tself.nodal_forces = np.dot(self.K,self.nodes_eucl)\n","\n","\t\t#add external forces\n","\t\tif(not self.external_nodal_forces is None):\n","                    self.nodal_forces += self.external_nodal_forces(t)\n","\t\t\t\t\n","\t\t#ground contacts\n","\t\t#self.nodal_forces[:,2] += np.where(self.nodes_eucl[:,2]<0.,-self.nodes_eucl[:,2]*1000,0)#np.exp(-self.nodes_eucl[:,2]),0)\n","\t\t\n","\t\t#compute damping\n","\t\tself.nodal_forces += -(self.nodes_dot.T*self.nodal_damping).T #nodal damping\n","\t\t#TODO: compute this damping matrix once\n","\t\tself.nodal_forces += -np.dot(np.dot(self.spring_connections.T*self.spring_d,self.spring_connections),self.nodes_dot) #spring damping\n","\t\t\n","\n","\tdef compute_potential_energy(self):\n","\t\t'''\n","\t\t\tComputes the potential energy of the structure.\n","\t\t\tcompute_spring_lengths needs to be called first.\n","\t\t'''\n","\t\tself.potential_energy = np.sum(self.spring_k*(self.L_spring-(self.spring_l0+self.spring_l0_offset))**2)/2\n","\t\treturn self.potential_energy\n","\n","\tdef initialize_ode(self,integrator=\"vode\",control_dt = 20000,internal_dt=1000,**kwargs):\n","\t\t'''\n","\t\t\tInitializes the integrator properties.\n","\t\t\tParameters: \n","\t\t\t\tintegrator: which integrator (vode/euler/dopri5/rk4/dopri853)\n","\t\t\t\tcontrol_dt: the control timestep in microseconds (integer!) == multiple of internal_dt\n","\t\t\t\tinternal_dt: the internal timestep in microseconds (time step of the integrator)\n","\t\t\t\tkwargs: any other arguments are passed directly to the set_integrator method of scipy.integrate.ode\n","\t\t'''\n","\t\tself.control_dt = control_dt\n","\t\tself.internal_dt = internal_dt\n","\t\tself.time = 0 #total simulation time in milliseconds since start of simulation\n","\t\tself.time_steps = 0 #==self.time/control_dt\n","\t\tself.num_steps = 0\n","\t\t#TODO: check if control_dt is a multiple of internal_dt\n","\n","\t\t#compute initial system state\n","\t\tself.Q_reduced = self.nodes_eucl\n","\t\tself.Q_dot_reduced = self.nodes_eucl*0\n","\t\t#vectorize\n","\t\tself.initial_state = np.hstack((self.Q_reduced.ravel(),self.Q_dot_reduced.ravel()))\n","\n","\t\t#self.precompute_matrices()\n","    \n","    if(integrator==\"vode\"):\n","      self.ode = sode(self._simu_callback) \n","      self.ode.set_integrator('vode',**kwargs)#,max_step=1e-4)\n","\t\t\n","    elif(integrator==\"dopri5\"):\n","      self.ode = sode(self._simu_callback) \n","      \n","      self.ode.set_integrator('dopri5',**kwargs)#,max_step=1e-4)\n","\t\telif(integrator==\"rk4\"):\n","      \n","\t\t\timport rk4\n","\t\t\tself.ode = rk4.RK4Integration(self._simu_callback,self.initial_state.shape[0],**kwargs)\n","\t\telif(integrator==\"euler\"):\n","\t\t\timport euler\n","\t\t\tself.ode = euler.EulerIntegration(self._simu_callback,self.initial_state.shape[0],**kwargs)\n","\n","\t\tself.ode.set_initial_value(self.initial_state)\n","\t\tself.spring_state = self.spring_l0_offset\n","\n","\t\t#TODO: add support for other integrators\n","\n","\tdef init_event_listeners(self):\n","\t\tself.event_listeners = {\"time_step\":[]}\n","\n","\tdef add_event_listener(self,callback,event):\n","\t\tself.event_listeners[event].append(callback)\n","\n","\tdef fire_event(self,event):\n","\t\tfor e in self.event_listeners[event]:\n","\t\t\te(event)\n","\n","\tdef simulate(self):\n","\t\t'''\n","\t\t\tPerforms a control step (advances the simulation control_dt microseconds)\n","\t\t'''\n","\t\t\n","\t\tfor i in range(1,self.control_dt/self.internal_dt+1):\n","\t\t\tstate = self.ode.integrate(1e-6*(self.time+self.internal_dt*i))\n","\t\t\n","\t\tself.compute_state(state)\n","\t\tself.time += self.control_dt\n","\t\tself.time_steps += 1\n","\t\tself.spring_state = self.spring_l0_offset\n","\t\tself.fire_event(\"time_step\")\n","\n","\tdef compute_state(self,state):\n","\t\t'''\n","\t\t\tComputes the state based on the information from the integrator\n","\t\t'''\n","\t\tq = state[:state.shape[0]/2]\n","\t\tq_dot = state[state.shape[0]/2:]\n","\t\t#convert this to nodal Euclidean coordinates\n","\t\tself.nodes_eucl = q.reshape((self.N,3))\n","\t\tself.nodes_dot = q_dot.reshape((self.N,3))\n","\n","\tdef _simu_callback(self,t,y):\n","\t\t'''\n","\t\t\tSimulation callback.\n","\t\t\tt: time at which to evaluate the derivative \n","\t\t\ty: system state at time t\n","\t\t\n","\t\t\tWe are integrating a second order system so\n","\t\t\ty takes the following form:\n","\t\t\tn n'\n","\t\t\twhere n are the euclidean coordinates stacked in a single row vector\n","\t\t'''\n","\t\tself.num_steps += 1\n","\t\tself.compute_state(y)\n","\t\t\n","\t\t#compute nodal forces\n","\t\tself.compute_nodal_forces(t,(t-self.time*1e-6)/(self.control_dt*1e-6))\n","\t\t            \t\t\n","\t\tself.nodes_dot_dot = (self.nodal_forces.T/self.node_mass).T\n","\t\tn1_n2 = np.sqrt(np.sum(self.bar_connections.dot(self.nodes_eucl)**2,1))\n","\t\tn1_n2_dot = np.sqrt(np.sum(self.bar_connections.dot(self.nodes_dot)**2,1))\n","\t\tn1_n2_nodes_dot_dot = np.sum(self.bar_connections.dot(self.nodes_eucl)*self.bar_connections.dot(self.nodes_dot_dot),1)\n","\t\t\n","\t\t#compute the constraint force (Lagrange multiplier) in Cartesian coordinates\n","\t\t#This is equivalent to the result on page 177 in Skelton's book\n","\t\t#the second term just removes any force (due to springs, friction and external impacts) in the direction of a bar\n","\t\t#the first term accounts for the velocity in the direction of a bar (needs to be zero) and is typically small\n","\t\tself.bar_force_densities = -(n1_n2_dot**2+n1_n2_nodes_dot_dot)/(2*n1_n2**2)\n","\t\t\n","\t\t''' This is the same as the line below\n","\t\tfor i in xrange(self.B):\n","\t\t    bi = self.bar_connections[i]\n","\t\t    _start = bi.argmin()\n","\t\t    _stop = bi.argmax()\n","\t\t    f = self.bar_force_densities[i]\n","\t\t    self.nodes_dot_dot[_start] += f*(self.nodes_eucl[_start]-self.nodes_eucl[_stop])\n","\t\t    self.nodes_dot_dot[_stop]  -= f*(self.nodes_eucl[_start]-self.nodes_eucl[_stop])\n","\t\t '''\n","\t\t\n","\t\tself.nodes_dot_dot += np.dot(self.bar_connections.T*self.bar_force_densities,self.bar_connections).dot(self.nodes_eucl)\n","\t\t\n","\t\tself.new_state = np.hstack((self.nodes_dot.flat,self.nodes_dot_dot.flat))\n","\t\t\n","\t\treturn self.new_state\n","\n","\t\t\n","\t\t\n","\t\t"],"execution_count":4,"outputs":[{"output_type":"error","ename":"IndentationError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-4-3f85d0a1f03e>\"\u001b[0;36m, line \u001b[0;32m159\u001b[0m\n\u001b[0;31m    if(integrator==\"vode\"):\u001b[0m\n\u001b[0m                           ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unindent does not match any outer indentation level\n"]}]},{"metadata":{"id":"kkauHniui1J3","colab_type":"code","outputId":"e204fee5-f3fa-47bc-abaa-6b39c9642eb4","executionInfo":{"status":"error","timestamp":1553277373661,"user_tz":-60,"elapsed":612,"user":{"displayName":"mark nabil","photoUrl":"","userId":"04731080965943929871"}},"colab":{"base_uri":"https://localhost:8080/","height":134}},"cell_type":"code","source":["'''\n","\tKen Caluwaerts\n","\t<ken@caluwaerts.eu>\n","\t\n","\tExample of a minimal tensegrity with 6 bars and 18 springs.\n","\tSee Calladine 1978 for a discussion of the properties of this structure.\n","'''\n","import matplotlib.pylab as plt\n","plt.ion()\n","import numpy as np\n","import mplab_gui\n","import simulator_springmass_stiff as simulator\n","\n","N = np.array([[-0.25,  0.  ,  0.5 ],\n","       [ 0.  ,  0.5 , -0.25],\n","       [ 0.5 , -0.25,  0.  ],\n","       [-0.5 , -0.25,  0.  ],\n","       [ 0.  , -0.5 ,  0.25],\n","       [ 0.25,  0.  ,  0.5 ],\n","       [ 0.25,  0.  , -0.5 ],\n","       [-0.25,  0.  , -0.5 ],\n","       [ 0.5 ,  0.25,  0.  ],\n","       [-0.5 ,  0.25,  0.  ],\n","       [ 0.  ,  0.5 ,  0.25],\n","       [ 0.  , -0.5 , -0.25]])\n","\n","#spring velocity damping\n","spring_d = np.ones(18)*0.2 #high damping, we only want to find the equilibrium position\n","spring_l0 = np.zeros(18)*0+0.2 #some value (doesn't really matter for this example)\n","node_mass = np.zeros(12)+.3 #some value for this example\n","spring_rates = np.ones(18)*100. #some value for this example\n","\n","#this matrix contains a 1 for a spring and a 2 for a bar\n","A = np.array([[0, 1, 1, 0, 0, 0, 0, 2, 0, 0, 1, 0],\n","       [1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 2],\n","       [1, 1, 0, 2, 0, 0, 0, 0, 1, 0, 0, 0],\n","       [0, 0, 2, 0, 1, 1, 0, 0, 0, 1, 0, 0],\n","       [0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 2, 0],\n","       [0, 1, 0, 1, 1, 0, 2, 0, 0, 0, 0, 0],\n","       [0, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 1],\n","       [2, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0],\n","       [0, 0, 1, 0, 0, 0, 1, 1, 0, 2, 0, 0],\n","       [0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 1, 1],\n","       [1, 0, 0, 0, 2, 0, 0, 0, 0, 1, 0, 1],\n","       [0, 2, 0, 0, 0, 0, 1, 0, 0, 1, 1, 0]])\n","C = np.zeros((18,12))\n","B = np.zeros((6,12))\n","\n","ci = 0\n","bi = 0\n","for i in xrange(12):\n","    for j in xrange(i,12):\n","        if(A[i,j]==1):\n","            C[ci,i] = 1\n","            C[ci,j] = -1\n","            ci+=1\n","        if(A[i,j]==2):\n","            B[bi,i] = 1\n","            B[bi,j] = -1\n","            bi+=1\n","            \n","#these springs show up blue in the GUI (easier to spot the actuators)\n","tagged_springs = np.zeros(C.shape[0])\n","\n","sim = simulator.Simulator(N, B, node_mass, C, spring_rates, spring_d, spring_l0, nodal_damping=0.0001)\n","gui = mplab_gui.Visualization(sim,draw_node_indices = True,tagged_springs=tagged_springs)\n","sim.add_event_listener(gui.callback,\"time_step\")\n","sim.initialize_ode(control_dt=50000)\n","l0 = spring_l0.copy()\n","X_save = []\n","for i in xrange(1000):\n","\tsim.simulate()\n","\t#you can actuate the structure here\n","\tprint \"%d\"%(i)\n","\tX_save.append(sim.nodes_eucl.copy())\n"],"execution_count":0,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"ignored","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-5-75a025edf442>\"\u001b[0;36m, line \u001b[0;32m74\u001b[0m\n\u001b[0;31m    print \"%d\"%(i)\u001b[0m\n\u001b[0m             ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}]},{"metadata":{"id":"lT2X58Xpi5LL","colab_type":"code","colab":{}},"cell_type":"code","source":["'''\n","\tKen Caluwaerts 2012-2013\n","\t<ken@caluwaerts.eu>\n","'''\n","import matplotlib.pylab as plt\n","plt.ion()\n","import matplotlib.animation as animation\n","import mpl_toolkits.mplot3d.axes3d as p3\n","import threading\n","import numpy as np\n","\n","class Visualization(object):\n","\t'''\n","\t\tA simple 3D visualization for tensegrity structures using the new Matplotlib animation interface (version 1.1.1)\n","\t\tBased on: http://matplotlib.sourceforge.net/trunk-docs/examples/animation/simple_3danim.py\n","\t'''\n","\tdef __init__(self, simulator,draw_node_indices=True,tagged_springs = None):\n","\t\tself.simulator = simulator\n","\t\tself.changed = False #Do we need to redraw\n","\t\tself.iteration=0\n","\t\tself.draw_node_indices = draw_node_indices\n","\t\tself.tagged_springs = tagged_springs\n","\t\tself.create_window()\n","\t\t\n","\t\t#self.animation = animation.FuncAnimation(self.fig,self.update,25,init_func=self.init_plot, blit=False)\n","\t\tself.init_plot()\n","\n","\tdef create_window(self):\n","\t\t'''\n","\t\t\tCreates a simple 3D plotting window\n","\t\t'''\n","\t\tself.fig = plt.figure()\n","\t\tself.ax = p3.Axes3D(self.fig)\n","\n","\n","\tdef init_plot(self):\n","\t\t'''\n","\t\t\tThis function initializes the plotting window.\n","\t\t'''\n","\t\t#get the structure for the first time from the simulator\n","\t\tnodes = self.simulator.nodes\n","\t\t#plot the structure\n","\t\tself.bars_plot = []\n","\t\tfor i in range(self.simulator.B):\n","\t\t\t_from = self.simulator.bar_connections[i].argmin()\n","\t\t\t_to = self.simulator.bar_connections[i].argmax()\n","\t\t\tself.bars_plot.append(self.ax.plot(nodes[(_from,_to),0],nodes[(_from,_to),1],nodes[(_from,_to),2],c='r',linewidth=3)[0])\n","\t\tself.springs_plot = []\n","\t\tfor i in range(self.simulator.S):\n","\t\t\t_from = self.simulator.spring_connections[i].argmin()\n","\t\t\t_to = self.simulator.spring_connections[i].argmax()\n","\t\t\tif(self.tagged_springs is None):\n","\t\t\t\tc = 'g'\n","\t\t\telse:\n","\t\t\t\tc = 'g' if self.tagged_springs[i]==0 else 'b'\n","\t\t\tself.springs_plot.append(self.ax.plot(nodes[(_from,_to),0],nodes[(_from,_to),1],nodes[(_from,_to),2],c=c)[0])\n","\n","\t\t#draw fixed nodes\n","\t\t#fixed_nodes = nodes[self.simulator.nodes_fixed_indices]\n","\t\t#if(fixed_nodes.shape[0]>0):\n","\t\t#\tself.ax.plot(fixed_nodes[:,0],fixed_nodes[:,1],fixed_nodes[:,2],'b+')\n","\t\tself.nodes_plot = self.ax.plot(self.simulator.nodes_eucl[:,0],self.simulator.nodes_eucl[:,1],self.simulator.nodes_eucl[:,2],'yo')\n","\t\t\n","\t\t#draw node indices\n","\t\t\n","\t\tself.indices_plot = []\n","\t\tif(self.draw_node_indices):\n","\t\t\tfor i in xrange(self.simulator.nodes_eucl.shape[0]):\n","\t\t\t\tself.indices_plot.append(self.ax.text(self.simulator.nodes_eucl[i,0],self.simulator.nodes_eucl[i,1],self.simulator.nodes_eucl[i,2],i))\n","\t\t#axes properties\n","\t\tself.ax.set_xlim3d([-.5, .5])\n","\t\tself.ax.set_xlabel('X')\n","\t\tself.ax.set_ylim3d([-.5, .5])\n","\t\tself.ax.set_ylabel('Y')\n","\t\tself.ax.set_zlim3d([0, 1])\n","\t\tself.ax.set_zlabel('Z')\n","\n","\t\tself.last_time = 0\n","\t\treturn self.bars_plot+self.springs_plot\n","\n","\tdef update(self,iteration):\n","\t\t'''\n","\t\t\tThis function refreshes the plot\n","\t\t'''\n","\t\tif self.changed:\n","\t\t\tfor i in range(self.simulator.B):\n","\t\t\t\tnodes = self.simulator.nodes_eucl\n","\t\t\t\t_from = self.simulator.bar_connections[i].argmin()\n","\t\t\t\t_to = self.simulator.bar_connections[i].argmax()\n","\t\t\t\tbar_plot = self.bars_plot[i]\n","\t\t\t\t# NOTE: there is no .set_data() for 3 dim data...\n","\t\t\t\tbar_plot.set_data(nodes[(_from,_to),0],nodes[(_from,_to),1])\n","\t\t\t\tbar_plot.set_3d_properties(nodes[(_from,_to),2])\n","\t\t\tfor i in range(self.simulator.S):\n","\t\t\t\tnodes = self.simulator.nodes_eucl\n","\t\t\t\t_from = self.simulator.spring_connections[i].argmin()\n","\t\t\t\t_to = self.simulator.spring_connections[i].argmax()\n","\t\t\t\tsprings_plot = self.springs_plot[i]\n","\t\t\t\t# NOTE: there is no .set_data() for 3 dim data...\n","\t\t\t\tsprings_plot.set_data(nodes[(_from,_to),0],nodes[(_from,_to),1])\n","\t\t\t\tsprings_plot.set_3d_properties(nodes[(_from,_to),2])\n","\t\t\t\t#springs_plot.set_linewidth(self.simulator.spring_forces[i])\n","\t\t\tself.nodes_plot[0].set_data(self.simulator.nodes_eucl[:,0],self.simulator.nodes_eucl[:,1])\n","\t\t\tself.nodes_plot[0].set_3d_properties(self.simulator.nodes_eucl[:,2])\n","\t\t\tself.changed = False\n","\t\t\tif(self.draw_node_indices):\n","\t\t\t\tfor i in xrange(self.simulator.nodes_eucl.shape[0]):\n","\t\t\t\t\tself.indices_plot[i]._position3d = np.array((self.simulator.nodes_eucl[i,0],self.simulator.nodes_eucl[i,1],self.simulator.nodes_eucl[i,2]))\n","\t\t\t#if(iteration%10==0):\n","\t\t\t#\tself.ax.plot(self.simulator.nodes_eucl[:,0],self.simulator.nodes_eucl[:,1],self.simulator.nodes_eucl[:,2],'bo')\n","\t\t\treturn self.bars_plot+self.springs_plot+self.nodes_plot+self.indices_plot\n","\t\telse:\n","\t\t\treturn []\n","\n","\tdef callback(self,event):\n","\t\tself.changed = True\n","\t\tself.last_time+=1\n","\t\tself.iteration+=1\n","\t\tif(self.last_time>10):\n","\t\t\tself.last_time=0\n","\t\t\tself.update(0)\n","\t\t\tplt.draw()\n","\t\t#if(self.iteration%2==0):\n","\t\t#\tplt.savefig('img/video_%.5d.png'%self.iteration)\n"],"execution_count":0,"outputs":[]}]}
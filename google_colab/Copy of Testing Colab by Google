{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Testing Colab by Google","version":"0.3.2","views":{},"default_view":{},"provenance":[{"file_id":"1ra-c-wjfp9n9s-OPq17ifI6N6wqvRQYh","timestamp":1525884916452}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"metadata":{"id":"QHpYLJJsJEX6","colab_type":"text"},"cell_type":"markdown","source":["**This is the first test in my Google Colab for Researcher**\n","\n","So the text part works just the way it should. The question is how to install new packages\n","Lets keep exploring\n","First we get rid of the preinstalled tensorflow and get the GPU varient of it."]},{"metadata":{"id":"r4bnpzqku8pj","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"26e00851-a58d-40ec-8fb7-4d5f638ac638","executionInfo":{"status":"ok","timestamp":1516857600748,"user_tz":-330,"elapsed":3342,"user":{"displayName":"RAJAT KANTI Bhattacharjee","photoUrl":"//lh5.googleusercontent.com/-eZ4WuOYK_lE/AAAAAAAAAAI/AAAAAAAAAZs/aoIj5kaE6LY/s50-c-k-no/photo.jpg","userId":"116930721419412578852"}}},"cell_type":"code","source":["!pip uninstall -y tensorflow"],"execution_count":0,"outputs":[{"output_type":"stream","text":["\u001b[31mCannot uninstall requirement tensorflow, not installed\u001b[0m\r\n"],"name":"stdout"}]},{"metadata":{"id":"ZAFSQfF4JQJo","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["!pip install keras"],"execution_count":0,"outputs":[]},{"metadata":{"id":"gyDh6yyFgBfw","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["!pip install tensorflow-gpu"],"execution_count":0,"outputs":[]},{"metadata":{"id":"Y-vTrjGIgkmT","colab_type":"text"},"cell_type":"markdown","source":["So thats how you can install keras and tensorflow and you need not do it again and again repeatedly\n","The next point comes from using this script. Now i have some training script \n","\n","But first lets get some datasets\n","\n","for that we will try [pydataset](https://github.com/iamaziz/PyDataset) or Quandl shoudl suffice\n","\n","And also we would need some image datasets which keras will give us :3 ....\n","\n"]},{"metadata":{"id":"ypeIZ9QmTBB8","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["import tensorflow as tf"],"execution_count":0,"outputs":[]},{"metadata":{"id":"ncwVIDXRWKYL","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["import keras"],"execution_count":0,"outputs":[]},{"metadata":{"id":"4tzVQhsArE0I","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["!pip install matplotlib"],"execution_count":0,"outputs":[]},{"metadata":{"id":"lBNYWDm2Dvis","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"9fa7abad-fed9-47d2-c028-fa8f3e840320","executionInfo":{"status":"ok","timestamp":1516857618628,"user_tz":-330,"elapsed":3010,"user":{"displayName":"RAJAT KANTI Bhattacharjee","photoUrl":"//lh5.googleusercontent.com/-eZ4WuOYK_lE/AAAAAAAAAAI/AAAAAAAAAZs/aoIj5kaE6LY/s50-c-k-no/photo.jpg","userId":"116930721419412578852"}}},"cell_type":"code","source":["!pip install numpy"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages\r\n"],"name":"stdout"}]},{"metadata":{"id":"bqrsNMcMqFdO","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["!pip install quandl"],"execution_count":0,"outputs":[]},{"metadata":{"id":"3ZMUPBHxqIin","colab_type":"text"},"cell_type":"markdown","source":["Now we will try an MNIST dataset analysis shall we ....\n","I will just copy paste my own code for this testing purpose"]},{"metadata":{"id":"yjxf0M3JqG28","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["# -*- coding: utf-8 -*-\n","\"\"\"\n","Created on Wed Jan 17 06:43:45 2018\n","@author: Rajat\n","\"\"\"\n","\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from keras.datasets import fashion_mnist as dataset\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout , Activation,Flatten,Convolution2D, MaxPooling2D ,AveragePooling2D\n","from keras.utils import np_utils\n","\n","\n","\n","def load_preprocess_image_data(data):\n","    (X_train , Y_train),(X_test , Y_test) = data\n","    # making data of type (m , h, w , c)\n","    X_train = X_train.reshape(X_train.shape[0],X_train.shape[1],X_train.shape[2],1) \n","    X_test = X_test.reshape(X_test.shape[0],X_test.shape[1],X_test.shape[2],1) \n","    # making data normalize\n","    X_norm_train = X_train.astype('float32')/255\n","    X_norm_test = X_test.astype('float32')/255\n","    # making classes having one hot encoding\n","    n_class = np.unique(Y_train).shape[0]\n","    Y_encoded_train = np_utils.to_categorical(Y_train,n_class)\n","    Y_encoded_test = np_utils.to_categorical(Y_test,n_class)\n","    return ((X_norm_train , Y_encoded_train),(X_norm_test,Y_encoded_test))\n","\n","def detection_model(shape):\n","    # Conv2d(3,3,c = 64) => Conv2d(4,4,c=128) => Conv2d(2,2,256) => AveragePool(2,2) =>dropoout=> faltten=>Dense=>dropout\n","    # => dense => dense =>output\n","    model = Sequential()\n","    model.add(Convolution2D(32 , kernel_size=(3,3), strides=(1,1) , padding='same' , activation='relu', input_shape=shape))\n","    model.add(Convolution2D(64 , kernel_size=(4,4), strides=(1,1) , padding='same' , activation='relu', input_shape=shape))\n","    model.add(Convolution2D(128 , kernel_size=(4,4), strides=(1,1) , padding='valid' , activation='relu', input_shape=shape))\n","    model.add(AveragePooling2D(pool_size=(2,2)))\n","    model.add(Dropout(0.25))\n","    model.add(Flatten())\n","    model.add(Dense(128, activation='relu'))\n","    model.add(Dropout(0.25))\n","    model.add(Dense(64, activation='relu'))\n","    model.add(Dense(32, activation='relu'))\n","    model.add(Dense(10, activation='softmax'))\n","    model.compile(loss='categorical_crossentropy',\n","                  optimizer='adam',\n","                  metrics=['accuracy'])\n","    return model\n","\n","def save_model(model,name):\n","     model_json = model.to_json()\n","     with open(name+\".json\", \"w\") as json_file:\n","         json_file.write(model_json)\n","     model.save_weights(name+\".h5\")\n","    \n","def load_model_weights(name):\n","    from keras.models import model_from_json\n","    json_file = open(name+'.json', 'r')\n","    loaded_model_json = json_file.read()\n","    json_file.close()\n","    loaded_model = model_from_json(loaded_model_json)\n","    loaded_model.load_weights(name+\".h5\")\n","    loaded_model.compile(loss='categorical_crossentropy',\n","                  optimizer='adam',\n","                  metrics=['accuracy'])\n","    return loaded_model\n","    \n","def verify_entry(X_test,Y_test,model , n):\n","    print(\"Actual Class is:\",np.argmax(Y_test[n:n+1]))\n","    print(\"Predicted Class is: \",np.argmax(model.predict(X_test[n:n+1])))\n","    plt.imshow(X_test[n].reshape(X_test.shape[1],X_test.shape[2]))\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"vuhpKvy1vbf9","colab_type":"text"},"cell_type":"markdown","source":["So let us verify whether we are using a GPU or not"]},{"metadata":{"id":"MNrgfJldqt55","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":272},"outputId":"86a1b1af-bd62-4e2a-bb36-bb29caf5b4df","executionInfo":{"status":"ok","timestamp":1516857628950,"user_tz":-330,"elapsed":2088,"user":{"displayName":"RAJAT KANTI Bhattacharjee","photoUrl":"//lh5.googleusercontent.com/-eZ4WuOYK_lE/AAAAAAAAAAI/AAAAAAAAAZs/aoIj5kaE6LY/s50-c-k-no/photo.jpg","userId":"116930721419412578852"}}},"cell_type":"code","source":["from tensorflow.python.client import device_lib\n","print(device_lib.list_local_devices())"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[name: \"/device:CPU:0\"\n","device_type: \"CPU\"\n","memory_limit: 268435456\n","locality {\n","}\n","incarnation: 17219564095399476710\n",", name: \"/device:GPU:0\"\n","device_type: \"GPU\"\n","memory_limit: 264044544\n","locality {\n","  bus_id: 1\n","}\n","incarnation: 14547000748873426566\n","physical_device_desc: \"device: 0, name: Tesla K80, pci bus id: 0000:00:04.0, compute capability: 3.7\"\n","]\n"],"name":"stdout"}]},{"metadata":{"id":"goAApNEassnP","colab_type":"text"},"cell_type":"markdown","source":["Woaaw TESLA K80 we are in for the show gentelmen though the compute capability makes me question.\n","Here is section of [quora](https://www.quora.com/What-is-new-in-CUDA-compute-capability-3-7) on it.\n","Also i think it is the older maxwell or kepler architecture GPU that are present here. Well still the performance should be good enough\n","One more if it helps [comparison of kepler accelerators](https://www.microway.com/knowledge-center-articles/in-depth-comparison-of-nvidia-tesla-kepler-gpu-accelerators/)\n","\n","Ok enough of chit chat lets get to computing\n"]},{"metadata":{"id":"LcoMmgy1q2hT","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":1285},"outputId":"9cdfce61-eaf7-4074-efd4-abc6e2b8f87d","executionInfo":{"status":"ok","timestamp":1516859228446,"user_tz":-330,"elapsed":448329,"user":{"displayName":"RAJAT KANTI Bhattacharjee","photoUrl":"//lh5.googleusercontent.com/-eZ4WuOYK_lE/AAAAAAAAAAI/AAAAAAAAAZs/aoIj5kaE6LY/s50-c-k-no/photo.jpg","userId":"116930721419412578852"}}},"cell_type":"code","source":["(X_train , Y_train),(X_test , Y_test) = load_preprocess_image_data(dataset.load_data())\n","model = detection_model(X_train[0].shape)\n","model.summary()\n","model.fit(X_train, Y_train, \n","          batch_size=32, nb_epoch=10, verbose=1)\n","score = model.evaluate(X_test, Y_test, verbose=1)\n","\n","verify_entry(X_test,Y_test,model , 1)\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","conv2d_10 (Conv2D)           (None, 28, 28, 32)        320       \n","_________________________________________________________________\n","conv2d_11 (Conv2D)           (None, 28, 28, 64)        32832     \n","_________________________________________________________________\n","conv2d_12 (Conv2D)           (None, 25, 25, 128)       131200    \n","_________________________________________________________________\n","average_pooling2d_4 (Average (None, 12, 12, 128)       0         \n","_________________________________________________________________\n","dropout_7 (Dropout)          (None, 12, 12, 128)       0         \n","_________________________________________________________________\n","flatten_4 (Flatten)          (None, 18432)             0         \n","_________________________________________________________________\n","dense_13 (Dense)             (None, 128)               2359424   \n","_________________________________________________________________\n","dropout_8 (Dropout)          (None, 128)               0         \n","_________________________________________________________________\n","dense_14 (Dense)             (None, 64)                8256      \n","_________________________________________________________________\n","dense_15 (Dense)             (None, 32)                2080      \n","_________________________________________________________________\n","dense_16 (Dense)             (None, 10)                330       \n","=================================================================\n","Total params: 2,534,442\n","Trainable params: 2,534,442\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/keras/models.py:944: UserWarning: The `nb_epoch` argument in `fit` has been renamed `epochs`.\n","  warnings.warn('The `nb_epoch` argument in `fit` '\n"],"name":"stderr"},{"output_type":"stream","text":["Epoch 1/10\n","60000/60000 [==============================] - 45s 746us/step - loss: 0.4687 - acc: 0.8293\n","Epoch 2/10\n","17472/60000 [=======>......................] - ETA: 31s - loss: 0.3113 - acc: 0.8882"],"name":"stdout"},{"output_type":"stream","text":["60000/60000 [==============================] - 44s 739us/step - loss: 0.2937 - acc: 0.8935\n","Epoch 3/10\n","30432/60000 [==============>...............] - ETA: 21s - loss: 0.2446 - acc: 0.9121"],"name":"stdout"},{"output_type":"stream","text":["60000/60000 [==============================] - 44s 738us/step - loss: 0.2447 - acc: 0.9113\n","Epoch 4/10\n","35904/60000 [================>.............] - ETA: 17s - loss: 0.2089 - acc: 0.9248"],"name":"stdout"},{"output_type":"stream","text":["60000/60000 [==============================] - 44s 739us/step - loss: 0.2099 - acc: 0.9234\n","Epoch 5/10\n","38592/60000 [==================>...........] - ETA: 15s - loss: 0.1806 - acc: 0.9329"],"name":"stdout"},{"output_type":"stream","text":["60000/60000 [==============================] - 44s 736us/step - loss: 0.1836 - acc: 0.9318\n","Epoch 6/10\n","40032/60000 [===================>..........] - ETA: 14s - loss: 0.1618 - acc: 0.9387"],"name":"stdout"},{"output_type":"stream","text":["60000/60000 [==============================] - 44s 739us/step - loss: 0.1655 - acc: 0.9385\n","Epoch 7/10\n","39872/60000 [==================>...........] - ETA: 14s - loss: 0.1442 - acc: 0.9474"],"name":"stdout"},{"output_type":"stream","text":["60000/60000 [==============================] - 44s 741us/step - loss: 0.1466 - acc: 0.9462\n","Epoch 8/10\n","40000/60000 [===================>..........] - ETA: 14s - loss: 0.1234 - acc: 0.9546"],"name":"stdout"},{"output_type":"stream","text":["60000/60000 [==============================] - 44s 740us/step - loss: 0.1267 - acc: 0.9535\n","Epoch 9/10\n","40384/60000 [===================>..........] - ETA: 14s - loss: 0.1114 - acc: 0.9601"],"name":"stdout"},{"output_type":"stream","text":["60000/60000 [==============================] - 44s 738us/step - loss: 0.1137 - acc: 0.9595\n","Epoch 10/10\n","40896/60000 [===================>..........] - ETA: 14s - loss: 0.1012 - acc: 0.9629"],"name":"stdout"},{"output_type":"stream","text":["60000/60000 [==============================] - 44s 739us/step - loss: 0.1038 - acc: 0.9618\n","10000/10000 [==============================] - 2s 244us/step\n","Actual Class is: 2\n","Predicted Class is:  2\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAUsAAAFKCAYAAACU6307AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAGmtJREFUeJzt3X9M1Pcdx/HXyQ/hRAQRmDgrtrEZ\n80c2F51odUVdF826arPEydQ2aRZdp/HHXEtM/bGY1IrGrtY/RKtmkzYjodnaZGYQ2y0zDnF19ge2\nDbZGhxQRBPklys/9sYzIcRzv73HHHfb5+Gv3ubef7+e462tf7sv7+3F1d3d3CwDg04hQLwAAhgPC\nEgAMCEsAMCAsAcCAsAQAA8ISAAwiQ70AhJd79+55HY+KilJ7e3vP4ytXrpjnzMjIGPS6hkpFRYWp\nLjY21jznuHHj/F0OwghnljAZMYKPCr7e/D6zfPnll/XRRx/J5XJp27ZtmjFjRiDXBQBhxa+wPH/+\nvK5du6aCggJ9+eWX2rZtmwoKCgK9NgAIG379blVSUqLFixdLkh555BE1NDSoubk5oAsDgHDi15ll\nbW2tpk6d2vN47NixqqmpUVxcXMAWhtAYOXKk6bnhdNHGiYkTJ4Z6CQhTAbkazr04Hhz9XQ0fOXJk\nr+e4Gs7V8K8bv34NT0lJUW1tbc/jmzdvKjk5OWCLAoBw41dYzps3T0VFRZKkS5cuKSUlhV/BATzQ\n/Po1fObMmZo6dap+9rOfyeVyaefOnYFeFwCEFb+/s9y6dWsg1wEAYc3FndLDS0dHh6kuPz/fPGde\nXp65trq62uv4lStX9PDDD/c8vnHjhnnOUaNGmWvv/y482Lq7u+VyuXqNWS/cuN1u83EiI+3nJD/5\nyU/MtevXr+8zNmPGDH388cd9xjB49LABgAFhCQAGhCUAGBCWAGBAWAKAAWEJAAaEJQAYEJYAYEBY\nAoABHTxDYP/+/ebaPXv2mOoaGhrMczrpNumv26aqqkrjx4/veRwdHW2es6WlxVzb3y3iPHV1dZnn\n7O8enXV1dRo7dmyvMesNYTo7O83Hv3v3rrn2zp075lpv3V7t7e2KiorqNbZ06VLznO+884659uuG\nM0sAMCAsAcCAsAQAA8ISAAwISwAwICwBwICwBAADwhIADAhLADAgLAHAwO/dHb/uTp065XV86dKl\n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\nAcCAsAQAg/8C5by5M9MFNG0AAAAASUVORK5CYII=\n","text/plain":["<matplotlib.figure.Figure at 0x7fe440467898>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"4pe3RRXttzRa","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":398},"outputId":"26fec02b-a3c4-46ae-a7fd-d7d359678801","executionInfo":{"status":"ok","timestamp":1516859320860,"user_tz":-330,"elapsed":1588,"user":{"displayName":"RAJAT KANTI Bhattacharjee","photoUrl":"//lh5.googleusercontent.com/-eZ4WuOYK_lE/AAAAAAAAAAI/AAAAAAAAAZs/aoIj5kaE6LY/s50-c-k-no/photo.jpg","userId":"116930721419412578852"}}},"cell_type":"code","source":["print(score)\n","verify_entry(X_test,Y_test,model , 500)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[0.23298748527765273, 0.9254]\n","Actual Class is: 2\n","Predicted Class is:  2\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<matplotlib.figure.Figure at 0x7fe440f4dd68>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"whIQ9T7Z3NEO","colab_type":"text"},"cell_type":"markdown","source":["Hmm ! that works.\n","Now to save the model and download them"]},{"metadata":{"id":"iA_RQ2Y73CX-","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["save_model(model,\"fashion_mnist\")"],"execution_count":0,"outputs":[]},{"metadata":{"id":"OTrfk_G35k0S","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"base_uri":"https://localhost:8080/","height":34},"outputId":"132a35b4-942b-4690-e9d4-4f4f8ef44047","executionInfo":{"status":"ok","timestamp":1516860067671,"user_tz":-330,"elapsed":1471,"user":{"displayName":"RAJAT KANTI Bhattacharjee","photoUrl":"//lh5.googleusercontent.com/-eZ4WuOYK_lE/AAAAAAAAAAI/AAAAAAAAAZs/aoIj5kaE6LY/s50-c-k-no/photo.jpg","userId":"116930721419412578852"}}},"cell_type":"code","source":["!ls"],"execution_count":0,"outputs":[{"output_type":"stream","text":["datalab  fashion_mnist.h5  fashion_mnist.json\r\n"],"name":"stdout"}]},{"metadata":{"id":"vfjkjv2p5mWX","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["from google.colab import files\n","files.download('fashion_mnist.h5')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"9E463QnD-txW","colab_type":"text"},"cell_type":"markdown","source":["And thats it. The standard way of training a model and then downloading it off the notebook's VM.\n","For more io operation from system or the Google Drive of your account you can refer to Googles own excellent documentation\n","[io docs](https://colab.research.google.com/notebook#fileId=/v2/external/notebooks/io.ipynb&scrollTo=p2E4EKhCWEC5)"]},{"metadata":{"id":"H8h6J3dj5yrL","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":[""],"execution_count":0,"outputs":[]}]}
{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"data_structure_algo_playground","version":"0.3.2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"metadata":{"id":"xb-ThuN_lpN_","colab_type":"text"},"cell_type":"markdown","source":["# Data structure and Algorithms"]},{"metadata":{"id":"NTKS7jptmEtL","colab_type":"text"},"cell_type":"markdown","source":["There are many resources to learn data structure and algorithms in general and in this notebook i will investigate my knowledge gaps regarding this study issue.\n","One of the books can be found here: https://doc.lagout.org/programmation/python/Data%20Structures%20and%20Algorithms%20in%20Python%20[Goodrich,%20Tamassia%20&%20Goldwasser%202013-03-18].pdf"]},{"metadata":{"id":"zgC2AJ3BlsfG","colab_type":"text"},"cell_type":"markdown","source":["## Problem Solving with Algorithms and Data Structures using Python\n"]},{"metadata":{"id":"9ujAShvPlyun","colab_type":"text"},"cell_type":"markdown","source":["This is a book in the link http://interactivepython.org/runestone/static/pythonds/index.html\n"]},{"metadata":{"id":"lJo4exzal23n","colab_type":"code","outputId":"f8c36f68-3790-48b2-d3e7-d66b027794b2","executionInfo":{"status":"ok","timestamp":1553103893373,"user_tz":-60,"elapsed":1778,"user":{"displayName":"mark nabil","photoUrl":"","userId":"04731080965943929871"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["myList = [1,2,3,4]\n","A = [myList]*3\n","print(A)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]\n"],"name":"stdout"}]},{"metadata":{"id":"JS3G_jBkNKZH","colab_type":"code","outputId":"44d14f5c-f2c0-45b0-a837-1ad439916ecf","executionInfo":{"status":"ok","timestamp":1553104038619,"user_tz":-60,"elapsed":1059,"user":{"displayName":"mark nabil","photoUrl":"","userId":"04731080965943929871"}},"colab":{"base_uri":"https://localhost:8080/","height":52}},"cell_type":"code","source":["\n","print(A)\n","\n","myList[2]=45\n","\n","#A = [myList]*3\n","\n","3print(A)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]\n","[[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]\n"],"name":"stdout"}]},{"metadata":{"id":"QpNry5MkbrZv","colab_type":"code","outputId":"dcccd866-9924-4b12-b619-bfec39d21ad2","executionInfo":{"status":"ok","timestamp":1553124495588,"user_tz":-60,"elapsed":1979,"user":{"displayName":"mark nabil","photoUrl":"","userId":"04731080965943929871"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["{3,6,\"cat\",4.5,False,3,6}"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{3, 4.5, 6, False, 'cat'}"]},"metadata":{"tags":[]},"execution_count":3}]},{"metadata":{"id":"avV4RwDwCiTQ","colab_type":"text"},"cell_type":"markdown","source":["### 1.13 Object-Oriented Programming in Python: Defining Classes"]},{"metadata":{"id":"gMavcQM7Ckd3","colab_type":"code","colab":{}},"cell_type":"code","source":["class Fraction:\n","\n","    def __init__(self,top,bottom):\n","        self.num = top\n","        self.den = bottom\n","        \n","    def __show__(self):\n","      print(self.num,\"/\",self.den)\n","      \n","    def str(self):\n","      return str(self.num)+\"/\"+str(self.den)\n","    \n","    def __add__(self,otherfraction):\n","\n","     newnum = self.num*otherfraction.den + self.den*otherfraction.num\n","     newden = self.den * otherfraction.den\n","\n","     return Fraction(newnum,newden)\n","  \n","    def __add__(self,otherfraction):\n","      newnum = self.num*otherfraction.den + self.den*otherfraction.num\n","      newden = self.den * otherfraction.den\n","      common = gcd(newnum,newden)\n","      return Fraction(newnum//common,newden//common)\n","   \n","    def __eq__(self, other):\n","      firstnum = self.num * other.den\n","      secondnum = other.num * self.den\n","\n","      return firstnum == secondnum\n","\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"XsOU6U3sFQjv","colab_type":"code","outputId":"2a0cf848-4742-4187-cbbe-fbf3f3c95530","executionInfo":{"status":"ok","timestamp":1553207952175,"user_tz":-60,"elapsed":595,"user":{"displayName":"mark nabil","photoUrl":"","userId":"04731080965943929871"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"cell_type":"code","source":["myfraction = Fraction(3,5)\n","#print(myfraction)\n","print(str(myfraction))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["3/5\n"],"name":"stdout"}]},{"metadata":{"id":"blSsRB0RbVpw","colab_type":"code","colab":{}},"cell_type":"code","source":["class LogicGate:\n","\n","    def __init__(self,n):\n","        self.label = n\n","        self.output = None\n","\n","    def getLabel(self):\n","        return self.label\n","\n","    def getOutput(self):\n","        self.output = self.performGateLogic()\n","        return self.output\n","\n","\n","      \n","class BinaryGate(LogicGate):\n","\n","    def __init__(self,n):\n","        LogicGate.__init__(self,n)\n","\n","        self.pinA = None\n","        self.pinB = None\n","    '''\n","    def getPinA(self):\n","        return int(input(\"Enter Pin A input for gate \"+ self.getLabel()+\"-->\"))\n","\n","    def getPinB(self):\n","        return int(input(\"Enter Pin B input for gate \"+ self.getLabel()+\"-->\"))\n","    '''\n","\n","    def getPinA(self):\n","      if self.pinA == None:\n","          return input(\"Enter Pin A input for gate \" + self.getName()+\"-->\")\n","      else:\n","          return self.pinA.getFrom().getOutput()\n","\n","    def getPinB(self):\n","      if self.pinB == None:\n","          return input(\"Enter Pin B input for gate \" + self.getName()+\"-->\")\n","      else:\n","          return self.pinB.getFrom().getOutput()\n","\n","    def setNextPin(self,source):\n","      if self.pinA == None:\n","          self.pinA = source\n","      else:\n","          if self.pinB == None:\n","              self.pinB = source\n","          else:\n","             raise RuntimeError(\"Error: NO EMPTY PINS\")\n","\n","class UnaryGate(LogicGate):\n","\n","    def __init__(self,n):\n","        LogicGate.__init__(self,n)\n","\n","        self.pin = None\n","\n","    def getPin(self):\n","        return int(input(\"Enter Pin input for gate \"+ self.getLabel()+\"-->\"))\n","\n","      \n","      \n","class AndGate(BinaryGate):\n","\n","    def __init__(self,n):\n","        BinaryGate.__init__(self,n)\n","\n","    def performGateLogic(self):\n","\n","        a = self.getPinA()\n","        b = self.getPinB()\n","        if a==1 and b==1:\n","            return 1\n","        else:\n","            return 0\n","          \n","          \n","class Connector:\n","\n","    def __init__(self, fgate, tgate):\n","        self.fromgate = fgate\n","        self.togate = tgate\n","\n","        tgate.setNextPin(self)\n","\n","    def getFrom(self):\n","        return self.fromgate\n","\n","    def getTo(self):\n","        return self.togate"],"execution_count":0,"outputs":[]},{"metadata":{"id":"K9Viivpkgl2M","colab_type":"code","outputId":"743b67d0-ad35-4afa-f76f-60b8b1d237f9","executionInfo":{"status":"ok","timestamp":1553209691350,"user_tz":-60,"elapsed":6443,"user":{"displayName":"mark nabil","photoUrl":"","userId":"04731080965943929871"}},"colab":{"base_uri":"https://localhost:8080/","height":70}},"cell_type":"code","source":["g1= AndGate(\"G1\")\n","g1.getOutput()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Enter Pin A input for gate G1-->1\n","Enter Pin B input for gate G1-->1\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["1"]},"metadata":{"tags":[]},"execution_count":31}]},{"metadata":{"id":"dIOeKiq5hzro","colab_type":"text"},"cell_type":"markdown","source":["Another main implementation from the website"]},{"metadata":{"id":"mtcELs8DhvBK","colab_type":"code","outputId":"2aee96af-e673-4d41-decd-bf767aa880a4","executionInfo":{"status":"ok","timestamp":1553209955248,"user_tz":-60,"elapsed":7485,"user":{"displayName":"mark nabil","photoUrl":"","userId":"04731080965943929871"}},"colab":{"base_uri":"https://localhost:8080/","height":105}},"cell_type":"code","source":["class LogicGate:\n","\n","    def __init__(self,n):\n","        self.name = n\n","        self.output = None\n","\n","    def getName(self):\n","        return self.name\n","\n","    def getOutput(self):\n","        self.output = self.performGateLogic()\n","        return self.output\n","\n","\n","class BinaryGate(LogicGate):\n","\n","    def __init__(self,n):\n","        LogicGate.__init__(self,n)\n","\n","        self.pinA = None\n","        self.pinB = None\n","\n","    def getPinA(self):\n","        if self.pinA == None:\n","            return int(input(\"Enter Pin A input for gate \"+self.getName()+\"-->\"))\n","        else:\n","            return self.pinA.getFrom().getOutput()\n","\n","    def getPinB(self):\n","        if self.pinB == None:\n","            return int(input(\"Enter Pin B input for gate \"+self.getName()+\"-->\"))\n","        else:\n","            return self.pinB.getFrom().getOutput()\n","\n","    def setNextPin(self,source):\n","        if self.pinA == None:\n","            self.pinA = source\n","        else:\n","            if self.pinB == None:\n","                self.pinB = source\n","            else:\n","                print(\"Cannot Connect: NO EMPTY PINS on this gate\")\n","\n","\n","class AndGate(BinaryGate):\n","\n","    def __init__(self,n):\n","        BinaryGate.__init__(self,n)\n","\n","    def performGateLogic(self):\n","\n","        a = self.getPinA()\n","        b = self.getPinB()\n","        if a==1 and b==1:\n","            return 1\n","        else:\n","            return 0\n","\n","class OrGate(BinaryGate):\n","\n","    def __init__(self,n):\n","        BinaryGate.__init__(self,n)\n","\n","    def performGateLogic(self):\n","\n","        a = self.getPinA()\n","        b = self.getPinB()\n","        if a ==1 or b==1:\n","            return 1\n","        else:\n","            return 0\n","\n","class UnaryGate(LogicGate):\n","\n","    def __init__(self,n):\n","        LogicGate.__init__(self,n)\n","\n","        self.pin = None\n","\n","    def getPin(self):\n","        if self.pin == None:\n","            return int(input(\"Enter Pin input for gate \"+self.getName()+\"-->\"))\n","        else:\n","            return self.pin.getFrom().getOutput()\n","\n","    def setNextPin(self,source):\n","        if self.pin == None:\n","            self.pin = source\n","        else:\n","            print(\"Cannot Connect: NO EMPTY PINS on this gate\")\n","\n","\n","class NotGate(UnaryGate):\n","\n","    def __init__(self,n):\n","        UnaryGate.__init__(self,n)\n","\n","    def performGateLogic(self):\n","        if self.getPin():\n","            return 0\n","        else:\n","            return 1\n","\n","\n","class Connector:\n","\n","    def __init__(self, fgate, tgate):\n","        self.fromgate = fgate\n","        self.togate = tgate\n","\n","        tgate.setNextPin(self)\n","\n","    def getFrom(self):\n","        return self.fromgate\n","\n","    def getTo(self):\n","        return self.togate\n","\n","\n","def main():\n","   g1 = AndGate(\"G1\")\n","   g2 = AndGate(\"G2\")\n","   g3 = OrGate(\"G3\")\n","   g4 = NotGate(\"G4\")\n","   c1 = Connector(g1,g3)\n","   c2 = Connector(g2,g3)\n","   c3 = Connector(g3,g4)\n","   print(g4.getOutput())\n","\n","main()\n"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Enter Pin A input for gate G1-->1\n","Enter Pin B input for gate G1-->0\n","Enter Pin A input for gate G2-->2\n","Enter Pin B input for gate G2-->0\n","1\n"],"name":"stdout"}]},{"metadata":{"id":"imbAIpH4sVhp","colab_type":"text"},"cell_type":"markdown","source":["### Graph and Graph algos\n","http://interactivepython.org/runestone/static/pythonds/Graphs/toctree.html\n"]},{"metadata":{"id":"XOk7rW5vq5IM","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":107},"outputId":"219749b7-dad6-470f-e640-d951d507e368","executionInfo":{"status":"ok","timestamp":1553262685882,"user_tz":-60,"elapsed":5277,"user":{"displayName":"mark nabil","photoUrl":"","userId":"04731080965943929871"}}},"cell_type":"code","source":["#@title library for graph and tree \n","\n","pip install pythonds"],"execution_count":18,"outputs":[{"output_type":"stream","text":["Collecting pythonds\n","  Downloading https://files.pythonhosted.org/packages/d5/23/3a6d8983605ba23ca972754a0ac81d1da3c9ea0a6f01b5b73d2bde3ac9fb/pythonds-1.2.1-py3-none-any.whl\n","Installing collected packages: pythonds\n","Successfully installed pythonds-1.2.1\n"],"name":"stdout"}]},{"metadata":{"id":"Y68d_4P2fYMZ","colab_type":"text"},"cell_type":"markdown","source":["### 7.6 "]},{"metadata":{"id":"A2xGQPAofd5u","colab_type":"code","colab":{}},"cell_type":"code","source":["class Vertex:\n","    def __init__(self,key):\n","        self.id = key\n","        self.connectedTo = {}\n","\n","    def addNeighbor(self,nbr,weight=0):\n","        self.connectedTo[nbr] = weight\n","\n","    def __str__(self):\n","        return str(self.id) + ' connectedTo: ' + str([x.id for x in self.connectedTo])\n","\n","    def getConnections(self):\n","        return self.connectedTo.keys()\n","\n","    def getId(self):\n","        return self.id\n","\n","    def getWeight(self,nbr):\n","        return self.connectedTo[nbr]\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"TKCT3JNPfhRF","colab_type":"code","colab":{}},"cell_type":"code","source":["class Graph:\n","    def __init__(self):\n","        self.vertList = {}\n","        self.numVertices = 0\n","\n","    def addVertex(self,key):\n","        self.numVertices = self.numVertices + 1\n","        newVertex = Vertex(key)\n","        self.vertList[key] = newVertex\n","        return newVertex\n","\n","    def getVertex(self,n):\n","        if n in self.vertList:\n","            return self.vertList[n]\n","        else:\n","            return None\n","\n","    def __contains__(self,n):\n","        return n in self.vertList\n","\n","    def addEdge(self,f,t,cost=0):\n","        if f not in self.vertList:\n","            nv = self.addVertex(f)\n","        if t not in self.vertList:\n","            nv = self.addVertex(t)\n","        self.vertList[f].addNeighbor(self.vertList[t], cost)\n","\n","    def getVertices(self):\n","        return self.vertList.keys()\n","\n","    def __iter__(self):\n","        return iter(self.vertList.values())\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"lAd_iM2rfkdP","colab_type":"code","outputId":"caeaceaf-4de6-4f1f-abc9-f8f2cbc26b28","executionInfo":{"status":"ok","timestamp":1553262162560,"user_tz":-60,"elapsed":599,"user":{"displayName":"mark nabil","photoUrl":"","userId":"04731080965943929871"}},"colab":{"base_uri":"https://localhost:8080/","height":70}},"cell_type":"code","source":["g = Graph()\n","for i in range(6):\n","  g.addVertex(i)\n","  \n","g.vertList\n","g.addEdge(0,1,5)\n","g.addEdge(0,5,2)\n","\n","g.addEdge(1,2,4)\n","\n","for v in g:\n","  for w in v.getConnections():\n","    print(\"( %s , %s )\" % (v.getId(), w.getId()))"],"execution_count":17,"outputs":[{"output_type":"stream","text":["( 0 , 1 )\n","( 0 , 5 )\n","( 1 , 2 )\n"],"name":"stdout"}]},{"metadata":{"id":"LggA_AbCr5Dn","colab_type":"text"},"cell_type":"markdown","source":["### 7.8 build graph from a file"]},{"metadata":{"id":"YjgcIjXGr0C3","colab_type":"code","colab":{}},"cell_type":"code","source":["from pythonds.graphs import Graph\n","\n","def buildGraph(wordFile):\n","    d = {}\n","    g = Graph()\n","    wfile = open(wordFile,'r')\n","    # create buckets of words that differ by one letter\n","    for line in wfile:\n","        word = line[:-1]\n","        for i in range(len(word)):\n","            bucket = word[:i] + '_' + word[i+1:]\n","            if bucket in d:\n","                d[bucket].append(word)\n","            else:\n","                d[bucket] = [word]\n","    # add vertices and edges for words in the same bucket\n","    for bucket in d.keys():\n","        for word1 in d[bucket]:\n","            for word2 in d[bucket]:\n","                if word1 != word2:\n","                    g.addEdge(word1,word2)\n","    return g\n"],"execution_count":0,"outputs":[]}]}